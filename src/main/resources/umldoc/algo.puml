@startuml
'===================================
PathFactory ..> Obstacle
PathFactory ..> Path
Path ..> PathAlgo
PathPlanningController ..> PathPlanningBiz
PathPlanningBiz ..> PathFactory

'===================================
class Path2D extends Path
class Path3D extends Path
class CircleObstacle extends Obstacle
class CylinderObstacle extends Obstacle
class SphereObstacle extends Obstacle
class StaticPathFactory<T, O> extends PathFactory
class DynamicPathFactory<T, O> extends PathFactory

class PathPlanningBizImpl implements PathPlanningBiz

'===================================
abstract class PathFactory<T, O> {
    protected T source;

    protected T target;

    protected List<O> obstacles;

    protected AlgoType algoType;

    protected Map<String, Double> params;

    public PathFactory(T source, T target, List<O> obstacles, AlgoType algoType, Map<String, Double> params)

    public abstract Path createStaticPath2D();

    public abstract Path createDynamicPath2D();

    public abstract Path createStaticPath3D();

    public abstract Path createDynamicPath3D();
}

abstract class Path<T, O> {
    protected List<T> path = new ArrayList<>();

    protected T source;

    protected T target;

    protected List<O> obstacles;

    protected AlgoType algoType;

    protected PathType pathType;

    protected Map<String, Double> params;

    public Path(T source, T target, List<O> obstacles, AlgoType algoType, PathType pathType, Map<String, Double> params)

    public List<T> getPath()

    public void setPath(List<T> path)

    abstract void construct()
}

abstract class Obstacle<T> {
    protected T location;
    protected ObstacleType obstacleType;
    protected double radius;

    public Obstacle(T location, ObstacleType obstacleType, double radius)
}

abstract class PathAlgo<T, O> {
    Path<T, O> path;

    public PathAlgo(Path<T, O> path)

    public abstract void initialize();

    public abstract void construct();
}

class PathPlanningController {
    @Resource
    PathPlanningBiz pathPlanningBiz;

    @DS("master")
    @PostMapping(value = "/getPath")
    public JSONObject getPath(@RequestBody JSONObject scenario)
}

interface PathPlanningBiz {
    JSONObject getPath(JSONObject scenario);

    JSONObject getPath2D(JSONObject scenario);

    JSONObject getPath3D(JSONObject scenario);
}

class DijkstraAlgo extends PathAlgo {
    private boolean solving = false;
    private int cells;
    private Node[][] map;
    private int checks = 0;
    private double length = 0;
    private int startx = -1;
    private int starty = -1;
    private int finishx = -1;
    private int finishy = -1;

    public ArrayList<Node> exploreNeighbors(Node current)
    public void explore(Node current, int lastx, int lasty, double hops)
    public void backtrack(int lx, int ly, double hops)
}

class AStarAlgo<T, O> extends PathAlgo {
    private boolean solving = false;
    private int cells;
    private Node[][] map;
    private int checks = 0;
    private double length = 0;
    private int startx = -1;
    private int starty = -1;
    private int finishx = -1;
    private int finishy = -1;

    public ArrayList<Node> exploreNeighbors(Node current)
    public void explore(Node current, int lastx, int lasty, double hops)
    public void backtrack(int lx, int ly, double hops)
    public ArrayList<Node> sortQue(ArrayList<Node> sort)
}

class RRTAlgo<T, O> extends PathAlgo{
    private boolean solving = false;
    private int cells;
    private Node[][] map;
    private int checks = 0;
    private double length = 0;
    private int startx = -1;
    private int starty = -1;
    private int finishx = -1;
    private int finishy = -1;
    private int gen = 200;
    private double stepSize = 1;

    public void backtrack(int lx, int ly, double hops)
}

class RRTStarAlgo<T, O> extends PathAlgo{
}
class InformedRRTStarAlgo<T, O> extends PathAlgo{
}
@enduml